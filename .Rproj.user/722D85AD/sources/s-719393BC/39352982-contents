\name{get_cases2}
\alias{get_cases2}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
%%  ~~function to do ... ~~
}
\description{
%%  ~~ A concise (1-5 lines) description of what the function does. ~~
}
\usage{
get_cases2(url = url, username = username, password = password, outbreak_id = outbreak_id)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{url}{
%%     ~~Describe \code{url} here~~
}
  \item{username}{
%%     ~~Describe \code{username} here~~
}
  \item{password}{
%%     ~~Describe \code{password} here~~
}
  \item{outbreak_id}{
%%     ~~Describe \code{outbreak_id} here~~
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (url = url, username = username, password = password, 
    outbreak_id = outbreak_id) 
{
    gd.version <- get_godata_version(url = url) \%>\% as.data.frame()
    names(gd.version) <- "version"
    gd.version <- gd.version \%>\% dplyr::select(version) \%>\% tidyr::separate(version, 
        c("a", "b", "c")) \%>\% dplyr::mutate_all(as.numeric)
    if (gd.version$a < 2 | gd.version$b < 38 | gd.version$c < 
        1) {
        stop("Go.Data must be version 2.38.1 or later. Please use the function get_cases() instead.")
    }
    message("Stopping Point 1")
    export.request <- httr::GET(paste0(url, "api/outbreaks/", 
        outbreak_id, "/cases/export", "?filter=\%7B\%22where\%22\%3A\%7B\%22useDbColumns\%22\%3A\%22true\%22\%2C\%20\%22dontTranslateValues\%22\%3A\%22true\%22\%2C\%20\%22jsonReplaceUndefinedWithNull\%22\%3A\%22true\%22\%20\%7D\%7D", 
        "&access_token=", get_access_token(url = url, username = username, 
            password = password)))
    message("Stopping Point 2")
    if (export.request$status_code != 200) {
        stop(paste0("Error code: ", export.request$status_code))
    }
    else if (export.request$status_code == 200) {
        export.request.id <- export.request \%>\% httr::content("text") \%>\% 
            jsonlite::fromJSON(flatten = TRUE) \%>\% unlist() \%>\% 
            unname()
        message(paste0("Export Request ID: ", export.request.id))
        Sys.sleep(1)
        export.request.status <- httr::GET(paste0(url, "api/export-logs/", 
            export.request.id, "?access_token=", get_access_token(url = url, 
                username = username, password = password))) \%>\% 
            httr::content("text") \%>\% jsonlite::fromJSON(flatten = TRUE)
        message(paste0("Export Request Status: ", export.request.status$statusStep))
        if (export.request.status$statusStep != "LNG_STATUS_STEP_EXPORT_FINISHED") {
            Sys.sleep(3)
            export.request.status <- httr::GET(paste0(url, "api/export-logs/", 
                export.request.id, "?access_token=", get_access_token(url = url, 
                  username = username, password = password))) \%>\% 
                httr::content("text") \%>\% jsonlite::fromJSON(flatten = TRUE)
            message(paste0("Export Request Status: ", export.request.status$statusStep))
        }
        if (export.request.status$statusStep == "LNG_STATUS_STEP_EXPORT_FINISHED") {
            df <- httr::GET(paste0(url, "api/export-logs/", export.request.id, 
                "/download?access_token=", get_access_token(url = url, 
                  username = username, password = password))) \%>\% 
                httr::content("text") \%>\% jsonlite::fromJSON(flatten = TRUE)
        }
    }
    names(df)[names(df) \%in\% "_id"] <- "id"
    return(df)
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory (show via RShowDoc("KEYWORDS")):
% \keyword{ ~kwd1 }
% \keyword{ ~kwd2 }
% Use only one keyword per line.
% For non-standard keywords, use \concept instead of \keyword:
% \concept{ ~cpt1 }
% \concept{ ~cpt2 }
% Use only one concept per line.

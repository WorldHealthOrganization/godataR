
###################################################################################################

url <- "http://localhost:3000/"                   # <--------------------- insert instance url here, don't forget the slash at end !
username <- "fullerj@who.int"                           # <--------------------- insert your username for signing into Go.Data webapp here
password <- "Monn12345678"                           # <--------------------- insert your password for signing into Go.Data webapp here
outbreak_id <- "995b5a2b-c7c7-48d3-8b67-15261143c4f9"   # <--------------- insert your outbreak ID here! (find it in URL when you have selected outbreak)

###################################################################################################



#load packages
library(tidyverse)
library(httr)
library(jsonlite)


#This funciton will be used before each API call to get an access token
get_access_token <- function() {
  response <- POST(url=paste0(url,"api/oauth/token?access_token=123"),  
                   body = list(username = username,password = password),                                       
                   encode = "json") %>%
    content(as = "text") %>%
    fromJSON(flatten = TRUE)
  return(response$access_token)
}
print(get_access_token()) #Test to make sure url, username, and password are valid


#Get Language Tokens
#Use This data frame as a codebook / data dictionary
df.language.tokens <- GET(paste0(url,"api/languages/english_us/language-tokens"), 
                          add_headers(Authorization = paste("Bearer", get_access_token(), sep = " "))) %>%
  content("text") %>%
  fromJSON(flatten=TRUE) %>%
  as.data.frame() %>%
  filter(grepl(tokens.token,pattern="_LAB_")) %>%
  select(token = tokens.token)


#Get Case Data from Go.Data
df.cases <- GET(paste0(url,"api/outbreaks/",outbreak_id,"/cases"), 
               add_headers(Authorization = paste("Bearer", get_access_token(), sep = " "))) %>%
  content("text") %>%
  fromJSON(flatten=TRUE) %>%
  as.data.frame()

#Get Lab Data from Go.Data
df.lab <- GET(paste0(url,"api/outbreaks/",outbreak_id,"/lab-results/aggregate"), 
                add_headers(Authorization = paste("Bearer", get_access_token(), sep = " "))) %>%
  content("text") %>%
  fromJSON(flatten=TRUE) %>%
  as.data.frame()

#Check current value of "Test result status"
gsub("LNG_REFERENCE_DATA_CATEGORY_LAB_TEST_RESULT_STATUS_","",df.lab$status)

###############################
#Upldate lab result record
###############################

#Find lab id number for record to be updated
lab.id <- df.lab$id[1]

#Get person id for lab record to be 
person.id <- df.lab$personId[1]

#Data to be updated
new.lab.data <- list(status = "LNG_REFERENCE_DATA_CATEGORY_LAB_TEST_RESULT_STATUS_COMPLETED",
                     testType = "LNG_REFERENCE_DATA_CATEGORY_TYPE_OF_LAB_TEST_PCR",
                     result="LNG_REFERENCE_DATA_CATEGORY_LAB_TEST_RESULT_POSITIVE",
                     dateTesting=paste0(Sys.Date(),"T00:00:00.000Z"))

#Send updated data to Go.Data
put <- PUT(paste0(url,"api/outbreaks/",outbreak_id,"/cases/",person.id,"/lab-results/",lab.id),
    add_headers(Authorization = paste("Bearer", get_access_token(), sep = " ")),
    body = new.lab.data,
    encode = "json")
warn_for_status(put)
put$status_code

# Check put response to see if data was updated
put.response <- put %>%
  content("text") %>%
  fromJSON(flatten=TRUE)
gsub("LNG_REFERENCE_DATA_CATEGORY_LAB_TEST_RESULT_STATUS_","",put.response$status)

#Check if data was correctly updated in Go.Data
a <- GET(paste0(url,"api/outbreaks/",outbreak_id,"/lab-results/aggregate"), 
    add_headers(Authorization = paste("Bearer", get_access_token(), sep = " "))) %>%
  content("text") %>%
  fromJSON(flatten=TRUE) %>%
  as.data.frame() 

#Check if Test result status value was actually updated
gsub("LNG_REFERENCE_DATA_CATEGORY_LAB_TEST_RESULT_STATUS_","",a$status)

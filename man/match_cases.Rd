% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_cases.R
\name{match_cases}
\alias{match_cases}
\title{Link two patient data sets with fuzzy or exact matching}
\usage{
match_cases(
  basedata,
  lookuptable,
  epiwindow,
  matchcols = c("names & dob", "names & age", "names", "doc ID"),
  firstnamecol = NULL,
  lastnamecol = NULL,
  dobcol = NULL,
  agecol = NULL,
  docidcol = NULL,
  basedatecol,
  lookupdatecol = "dateOfReporting",
  lookupmatchcol = "visualId",
  method = c("fuzzy", "exact"),
  reason = c("link new", "edit nonlab", "edit lab", "add sequencing")
)
}
\arguments{
\item{basedata}{data.frame of patient records to match to another data set}

\item{lookuptable}{data.frame of patient records to retrieve matches from}

\item{epiwindow}{maximum number of days between sample date and report date}

\item{matchcols}{one of "names & dob", "names & age", "names" or "doc ID".}

\item{firstnamecol}{name of lab column containing first names (character)}

\item{lastnamecol}{name of lab column containing last names (character)}

\item{dobcol}{name of lab column containing dates of birth (character)}

\item{agecol}{name of lab column containing age in years (character)}

\item{docidcol}{name of lab column containing document ID numbers (character)}

\item{basedatecol}{name of date column in base data to use for epiwindow}

\item{lookupdatecol}{name of date column in lookup table to use for epiwindow}

\item{lookupmatchcol}{name of ID column in lookup table to return matches of}

\item{method}{one of "fuzzy" or "exact"}

\item{reason}{one of 'link new', 'edit nonlab', 'edit lab', 'add sequencing'}
}
\value{
The base data set is returned with new columns added in two formats:
(a) match report which indicates which criteria were met for each match and
(b) godata import-ready table which includes match IDs, date-time stamp and
'sequenced' column, where relevant.
}
\description{
This function will perform exact or fuzzy matching to link two data sets,
based on patient demographic columns that must be present in both.

This function requires two data sets as input:
\itemize{
\item 'Base' data set (the data set you want to return the matches for)
\item 'Lookup table' (the data set you want to retrieve the matches from)
}

The lookup tables can be imported from Go.Data with \code{get_cases_epiwindow()}
and \code{get_labresults_epiwindow()} functions, respectively, which are both
available in this package (godataR).

The following column types are used for matching, either individually or in
combination:
\enumerate{
\item Patient first name
\item Patient last name
\item Patient date of birth
\item Patient age in years
\item Patient identity number (e.g. from social security card or passport)
\item Patient record date (compared with date from second data set)
}

The following combinations are available as match criteria:
\itemize{
\item \code{names & dob}: patient first name, last name and date of birth
\item \code{names & age}: patient first name, last name and age in years
\item \code{names}: patient first name and last name
\item \verb{doc ID}: patient national identity card number
}

In addition, all matches returned with these criteria are further tested to
determine if they fall within the selected date window (\code{epiwindow}).  For
this reason, it is necessary to specify a date column to compare in both data
sets, i.e. \code{basedatecol} for the base data set and \code{lookupdatecol} for the
data set to retrieve the matches from.

The function has been designed with the following use cases in mind:
\enumerate{
\item Add new laboratory results (base data set) to existing cases in Go.Data
(look up table); match is with Go.Data case IDs
\item Update existing lab records in Go.Data (lookup table) with new
sequencing results (base data set); match is with Go.Data lab record IDs
\item Edit existing lab records in Go.Data (lookup table) with different
values (base data); match is with Go.Data lab record IDs
}

The function can also be used to map other data sets, provided the same
column types are provided for matching.

When matching is being performed to link new records (e.g. new lab results),
only the match ID from the lookup table is appended.

If matching is being performed to update or edit lab records, both the
match ID for the records to be updated and a date time stamp
(godata_updatedat) are returned.  When performing bulk imports to Go.Data,
this date time stamp needs to be mapped to the 'Updated on' column (which
tells Go.Data to replace existing values instead of creating a new record).

Adding new sequencing results to existing lab records is a special case; in
addition to the match IDs and the date time stamp, a column indicating that
sequencing has been performed is added (\code{sequenced = TRUE}).  When importing
the results to Go.Data, this column should be mapped to 'Has sequencing'.
}
\details{
\strong{Broad approach:}
As fuzzy matching can be computationally intensive, both input tables (base
and lookup) are first converted to data.table.

Exact matches are performed using data.table syntax, which should be very
fast, even for large data sets.  Further information on the syntax used is
available in
\href{https://stackoverflow.com/questions/73613758/get-indices-of-matches-with-a-column-in-a-second-data-table#73614750}{this StackOverflow post}.

Fuzzy matches are performed using \code{EmilMisc::mamatch()} from the package
created by Emil Bode (available on GitHub), which can return multiple matches
if match columns contain duplicated values. This is an extension of the
\code{stringdist::amatch()} function which only returns the first match.

\strong{Linking by first name and last name:}
Patient names (first name and last name) are converted to soundex codes for
fuzzy matching.  At present, this facility is only available for data written
in the English alphabet; future versions will include a character translator
to accommodate other text types. Note that the more syllables a name contains,
the less discriminatory soundex codes will be.  It is therefore advisable to
combine fuzzy matching on names with date of birth or age if possible, as
this will increase the specificity of the matches. You may also wish to test
the different match protocols in this function on a test data set with known
matches, before choosing which protocol to use in a routine workflow.

For both fuzzy and exact matching, first and last names are first compared
with their counterparts in the lookup table.  Then first names from the base
data are compared with last names from the lookup table, and vice versa, to
match any names that may have been recorded in the wrong order.

\strong{Linking by date of birth:}
For date of birth, a Damerau-Levenshtein distance of 1 is used (this allows
for a maximum of one transposition, e.g. 21 written as 12).  Transpositions
in dates of birth are relatively common typographic errors.

\strong{Linking by age:}
If dates of birth are not available, age in years can be used in combination
with first and last name instead.  Only exact matches are performed on age,
as the number of digits is too small to reliably facilitate any kind of
fuzzy distance matching.

\strong{Linking by document number:}
If a national identity number (such as social security number, hospital
number or passport number) is present in both data sets, this ID number can
be used for matching instead of names and dates of birth or age.  Often this
type of number may be unique to the patient but not necessarily unique to
their current case episode of illness.  For this reason (as with all the
other match protocols) matches will only be returned for cases from the
lookup table that are also within the user-defined epidemiological window.

Both exact and fuzzy matching are available for document ID.  Fuzzy matching
is performed with a Damerau-Levenshtein distance of 1 (allowing for one
transposition).  Users are advised to perform exact matches on document
number in the first instance, unless the number comprises of at least eight
digits.  Shorter numbers may return too many matches that meet the DL = 1
criteria.  If a single match cannot be identified from all the criteria in
the match protocol, a result of 'no match' will be returned.

\strong{Linking by episode window:}
This function requires matches based on patient demographics to also fall
within a user-defined episode window (maximum number of days allowed
between a date in the base data set and a date in the lookup table to
confirm the match).  How the episode window is defined depends on the two
dates available for comparison.  For example, if using specimen date for lab
results and comparing this with case notification date in Go.Data, it may be
useful to use the number of days that distinguish ongoing infections from
reinfections, especially if there are some known reinfections in the data.
The appropriate episode window to use will depend on the pathogen and the
nature of the outbreak under investigation, as well as national and
international case definitions for reinfection.  For other scenarios, a
simpler approach may suffice (such as taking the average time in days between
case notification and specimen collection dates).

\strong{Dealing with multiple matches:}
If more than one match is returned for any column (e.g. if a first name is
present more than once in the lookup table), the final match will be based on
the ties between all match columns (e.g. if matching on firstName, lastName
and dob, the final match will be made with the row index that is represented
in all three column matches).
}
\examples{
########################################################
# 01. Link new lab results to existing cases in Go.Data:
########################################################

# Load example lab results:
data(new_lab_results)

# Load example case data from Go.Data to match to:
data(case_lookup_table)

# Match lab results to cases by names and dates of birth:
labresmatched <- match_cases(basedata = new_lab_results,
                             lookuptable = case_lookup_table,
                             epiwindow = 30,
                             matchcols = "names & dob",
                             firstnamecol = "firstname",
                             lastnamecol = "surname",
                             dobcol = "birthdate",
                             basedatecol = "sample_collection_date",
                             lookupdatecol = "dateOfReporting",
                             lookupmatchcol = "visualId",
                             method = "fuzzy",
                             reason = "link new")

# Check match results:
labresmatched$match_report$match_id

#################################################################
# 02. Link sequencing results to existing lab records in Go.Data:
#################################################################

# Load example whole genome sequencing results:
data(updated_lab_results)

# Load example lab records from Go.Data to match to:
data(lab_lookup_table)

# Match sequencing results to lab records by names and dates of birth:
seqresmatched <- match_cases(basedata = updated_lab_results,
                             lookuptable = lab_lookup_table,
                             epiwindow = 30,
                             matchcols = "names & dob",
                             firstnamecol = "firstname",
                             lastnamecol = "surname",
                             dobcol = "birthdate",
                             basedatecol = "sample_date",
                             lookupdatecol = "godata_sampledate",
                             lookupmatchcol = "godata_system_lid",
                             method = "fuzzy",
                             reason = "add sequencing")

# Check match results
seqresmatched$match_report$match_id
}
\author{
Amy Mikhail, \email{amy.mikhail@gmail.com}
}
